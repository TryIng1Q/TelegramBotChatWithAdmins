// DataBase 
const { readDb, writeDb } = require("./dbFunctions");

// SQL methods
const { createNewUser, getUserInfo, setChatIDToUser, getUserInfoByChatID } = require('./sql.js');

// Scenes
const { Scenes} = require('telegraf');
const { BaseScene } = Scenes;


// Bot methods
const botMethods = require('./botMethods.js');


const myScenes = {
	addNewUser() {
		const newUserScene = new BaseScene('ADD_NEW_USER');
		newUserScene.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));

		newUserScene.on('text', async (ctx) => {
			if ((ctx.message.text).length === 11) {
				ctx.session.tel = ctx.message.text;
				await ctx.scene.enter('SET_USER_PASSWORD');
			} else {
				await ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 11 —Å–∏–º–≤–æ–ª–æ–≤');

				await ctx.scene.reenter();
			}
		});

		return newUserScene;
	},
	setNewUserPassword() {
		const setPasswordScene = new BaseScene('SET_USER_PASSWORD');

		setPasswordScene.enter((ctx) => ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${ctx.session.tel}`));

		setPasswordScene.on('text', async (ctx) => {
			// –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–≤ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			const adminsInfo = readDb('data_base/adminsInfo.json')[0];
			let {adminCount, currentAdmin} = adminsInfo;

			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const currentDate = new Date();

			const serverAwswer = createNewUser([
				0, 
				Number(ctx.session.tel), 
				'name', 
				`${currentDate.getDate()} ${currentDate.getMonth()} ${currentDate.getFullYear()}`,
				adminsInfo[currentAdmin].chat_id,
				adminsInfo[currentAdmin].admin_name,
				0,
				10,
				ctx.message.text
			]);

			// –°–º–µ–Ω–∞ –∞–¥–º–∏–Ω–∞
			if (currentAdmin + 1 > adminCount) currentAdmin = 1;
			else currentAdmin += 1;

			adminsInfo.currentAdmin = currentAdmin;
			writeDb([adminsInfo], 'data_base/adminsInfo.json');


			if (serverAwswer) {
				await ctx.reply('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
			} else {
				await ctx.reply('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
			}

			await ctx.scene.leave();
		});

		return setPasswordScene;
	},
	loginUser() {
		const loginScene = new BaseScene('LOGIN_USER');
		loginScene.enter((ctx) => ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑–¥—ñ –∫–µ–ª–µ—Å—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: 77777777777'));

		loginScene.on('text', async (ctx) => {
			const serverAnswer = await getUserInfo(ctx.message.text);

			if (serverAnswer === undefined) {
				ctx.reply('–°—ñ–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å –Ω”©–º—ñ—Ä–¥—ñ –µ–Ω–≥—ñ–∑–≥–µ–Ω —Å–∏—è“õ—Ç—ã—Å—ã–∑');

				ctx.scene.leave();
			} else {
				ctx.session.currentUser = serverAnswer;

				await ctx.scene.enter('SET_USER_PASS');
			};
		});

		return loginScene;
	},
	passwordUser() {
		const setPasswordScene = new BaseScene('SET_USER_PASS');

		setPasswordScene.enter((ctx) => ctx.reply('“ö“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑'));

		setPasswordScene.on('text', async (ctx) => {
			if (ctx.message.text === ctx.session.currentUser.pass) {
				// –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ chat_id
				const serverAnswer = await setChatIDToUser(ctx.chat.id, ctx.session.currentUser.tel_id);

				if (serverAnswer) {
					const questionForm = await ctx.reply('–°—ñ–∑ –µ—Å–µ–ø—Ç—ñ–∫ –∂–∞–∑–±–∞“ì–∞ —Å”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ“£—ñ–∑', {
						reply_markup: {
								inline_keyboard: [ [{ text: "–°“±—Ä–∞“õ “õ–æ—é ‚Ü©", callback_data: "question-btn" }] ]
						},
						chat_id: ctx.chat.id,
					});

					bot.action('question-btn', async (ctx) => {
						bot.telegram.deleteMessage(questionForm.chat.id, questionForm.message_id).catch(error => {
							console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É question - ${error}`);
						});

						await ctx.scene.enter('GET_QUESTION');
					});
				} else {
					ctx.reply('–ë—ñ—Ä–¥–µ“£–µ –¥“±—Ä—ã—Å –±–æ–ª–º–∞–¥—ã, –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑');
				};
			} else {
				ctx.reply('“ö“±–ø–∏—è —Å”©–∑ —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ');

				ctx.scene.leave();
			};
		});

		return setPasswordScene;
	},
	getQuestionScene() {
		// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
		const questionScene = new BaseScene('GET_QUESTION');
		questionScene.enter((ctx) => ctx.reply(`–°—ñ–∑–¥—ñ“£ –∫–µ–ª–µ—Å—ñ –∂–∞–∑–±–∞“£—ã–∑ —Å“±—Ä–∞“õ —Ä–µ—Ç—ñ–Ω–¥–µ –µ—Å–µ–ø—Ç–µ–ª–µ–¥—ñ.
–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Ç”©–º–µ–Ω–¥–µ “õ–æ–π—ã“£—ã–∑üëá`));

		questionScene.on('text', async (ctx) => {
			const userInfo = await getUserInfoByChatID(ctx.chat.id);
			
			const adminsInfo = readDb('data_base/adminsInfo.json')[0];
			await ctx.reply(`–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“ì—ã“£—ã–∑“ì–∞ –ö—É—Ä–∞—Ç–æ—Ä –∂–∞—É–∞–ø –±–µ—Ä–µ–¥—ñ. –ñ–∞—É–∞–ø 10-30 –º–∏–Ω—É—Ç –∞—Ä–∞–ª—ã“ì—ã–Ω–¥–∞ –∫–µ–ª–µ–¥—ñ.`);


			botMethods.resendToAdmin(ctx, userInfo.admin_id);

			ctx.scene.leave();
		});

		return questionScene;
	},
};

module.exports = {myScenes: myScenes};